// CRC.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
#include <windows.h>
#include <process.h>
#include <conio.h>

using namespace std;

int myStrchr(const char* string, char letter, int size);
long long getCRC64(const char* string, int length);
long long revCRC64(const char* string, int min, int max, long long crc);
	const char* salt =
		"\x00\x00\x00\x00\x00\x00\x00\x00\x6F\x5F\xA7\x03\xBE\x4C\x2E\xB3"
		"\x5B\xA0\x40\xA8\x57\x36\x84\xF4\x34\xFF\xE7\xAB\xE9\x7A\xAA\x47"
		"\x33\x5E\x8F\xFF\x84\xC3\xD0\x7B\x5C\x01\x28\xFC\x3A\x8F\xFE\xC8"
		"\x68\xFE\xCF\x57\xD3\xF5\x54\x8F\x07\xA1\x68\x54\x6D\xB9\x7A\x3C"
		"\x66\xBC\x1E\xFF\x09\x87\xA1\xF7\x09\xE3\xB9\xFC\xB7\xCB\x8F\x44"
		"\x3D\x1C\x5E\x57\x5E\xB1\x25\x03\x52\x43\xF9\x54\xE0\xFD\x0B\xB0"
		"\x55\xE2\x91\x00\x8D\x44\x71\x8C\x3A\xBD\x36\x03\x33\x08\x5F\x3F"
		"\x0E\x42\xD1\xA8\xDA\x72\xF5\x78\x61\x1D\x76\xAB\x64\x3E\xDB\xCB"
		"\x49\x66\x33\x51\x38\xA1\x9B\x7D\x26\x39\x94\x52\x86\xED\xB5\xCE"
		"\x12\xC6\x73\xF9\x6F\x97\x1F\x89\x7D\x99\xD4\xFA\xD1\xDB\x31\x3A"
		"\x7A\x38\xBC\xAE\xBC\x62\x4B\x06\x15\x67\x1B\xAD\x02\x2E\x65\xB5"
		"\x21\x98\xFC\x06\xEB\x54\xCF\xF2\x4E\xC7\x5B\x05\x55\x18\xE1\x41"
		"\x2F\xDA\x2D\xAE\x31\x26\x3A\x8A\x40\x85\x8A\xAD\x8F\x6A\x14\x39"
		"\x74\x7A\x6D\x06\x66\x10\xBE\x7E\x1B\x25\xCA\x05\xD8\x5C\x90\xCD"
		"\x1C\x84\xA2\x51\xB5\xE5\xEA\xF1\x73\xDB\x05\x52\x0B\xA9\xC4\x42"
		"\x47\x24\xE2\xF9\xE2\xD3\x6E\x05\x28\x7B\x45\xFA\x5C\x9F\x40\xB6"
		"\x92\xCC\x66\xA2\x70\x42\x37\xFB\xFD\x93\xC1\xA1\xCE\x0E\x19\x48"
		"\xC9\x6C\x26\x0A\x27\x74\xB3\x0F\xA6\x33\x81\x09\x99\x38\x9D\xBC"
		"\xA1\x92\xE9\x5D\xF4\x81\xE7\x80\xCE\xCD\x4E\x5E\x4A\xCD\xC9\x33"
		"\xFA\x32\xA9\xF5\xA3\xB7\x63\x74\x95\x6D\x0E\xF6\x1D\xFB\x4D\xC7"
		"\xF4\x70\x78\x5D\x79\xC5\x96\x0C\x9B\x2F\xDF\x5E\xC7\x89\xB8\xBF"
		"\xAF\xD0\x38\xF5\x2E\xF3\x12\xF8\xC0\x8F\x9F\xF6\x90\xBF\x3C\x4B"
		"\xC7\x2E\xF7\xA2\xFD\x06\x46\x77\xA8\x71\x50\xA1\x43\x4A\x68\xC4"
		"\x9C\x8E\xB7\x0A\xAA\x30\xC2\x83\xF3\xD1\x10\x09\x14\x7C\xEC\x30"
		"\xDB\xAA\x55\xF3\x48\xE3\xAC\x86\xB4\xF5\xF2\xF0\xF6\xAF\x82\x35"
		"\x80\x0A\x15\x5B\x1F\xD5\x28\x72\xEF\x55\xB2\x58\xA1\x99\x06\xC1"
		"\xE8\xF4\xDA\x0C\xCC\x20\x7C\xFD\x87\xAB\x7D\x0F\x72\x6C\x52\x4E"
		"\xB3\x54\x9A\xA4\x9B\x16\xF8\x09\xDC\x0B\x3D\xA7\x25\x5A\xD6\xBA"
		"\xBD\x16\x4B\x0C\x41\x64\x0D\x71\xD2\x49\xEC\x0F\xFF\x28\x23\xC2"
		"\xE6\xB6\x0B\xA4\x16\x52\x89\x85\x89\xE9\xAC\xA7\xA8\x1E\xA7\x36"
		"\x8E\x48\xC4\xF3\xC5\xA7\xDD\x0A\xE1\x17\x63\xF0\x7B\xEB\xF3\xB9"
		"\xD5\xE8\x84\x5B\x92\x91\x59\xFE\xBA\xB7\x23\x58\x2C\xDD\x77\x4D"
		"\xA1\x87\xC3\xEB\xCA\x2B\xB6\x64\xCE\xD8\x64\xE8\x74\x67\x98\xD7"
		"\xFA\x27\x83\x43\x9D\x1D\x32\x90\x95\x78\x24\x40\x23\x51\x1C\x23"
		"\x92\xD9\x4C\x14\x4E\xE8\x66\x1F\xFD\x86\xEB\x17\xF0\xA4\x48\xAC"
		"\xC9\x79\x0C\xBC\x19\xDE\xE2\xEB\xA6\x26\xAB\xBF\xA7\x92\xCC\x58"
		"\xC7\x3B\xDD\x14\xC3\xAC\x17\x93\xA8\x64\x7A\x17\x7D\xE0\x39\x20"
		"\x9C\x9B\x9D\xBC\x94\x9A\x93\x67\xF3\xC4\x3A\xBF\x2A\xD6\xBD\xD4"
		"\xF4\x65\x52\xEB\x47\x6F\xC7\xE8\x9B\x3A\xF5\xE8\xF9\x23\xE9\x5B"
		"\xAF\xC5\x12\x43\x10\x59\x43\x1C\xC0\x9A\xB5\x40\xAE\x15\x6D\xAF"
		"\xE8\xE1\xF0\xBA\xF2\x8A\x2D\x19\x87\xBE\x57\xB9\x4C\xC6\x03\xAA"
		"\xB3\x41\xB0\x12\xA5\xBC\xA9\xED\xDC\x1E\x17\x11\x1B\xF0\x87\x5E"
		"\xDB\xBF\x7F\x45\x76\x49\xFD\x62\xB4\xE0\xD8\x46\xC8\x05\xD3\xD1"
		"\x80\x1F\x3F\xED\x21\x7F\x79\x96\xEF\x40\x98\xEE\x9F\x33\x57\x25"
		"\x8E\x5D\xEE\x45\xFB\x0D\x8C\xEE\xE1\x02\x49\x46\x45\x41\xA2\x5D"
		"\xD5\xFD\xAE\xED\xAC\x3B\x08\x1A\xBA\xA2\x09\xEE\x12\x77\x26\xA9"
		"\xBD\x03\x61\xBA\x7F\xCE\x5C\x95\xD2\x5C\xC6\xB9\xC1\x82\x72\x26"
		"\xE6\xA3\x21\x12\x28\xF8\xD8\x61\x89\xFC\x86\x11\x96\xB4\xF6\xD2"
		"\x33\x4B\xA5\x49\xBA\x69\x81\x9F\x5C\x14\x02\x4A\x04\x25\xAF\x2C"
		"\x68\xEB\xE5\xE1\xED\x5F\x05\x6B\x07\xB4\x42\xE2\x53\x13\x2B\xD8"
		"\x00\x15\x2A\xB6\x3E\xAA\x51\xE4\x6F\x4A\x8D\xB5\x80\xE6\x7F\x57"
		"\x5B\xB5\x6A\x1E\x69\x9C\xD5\x10\x34\xEA\xCD\x1D\xD7\xD0\xFB\xA3"
		"\x55\xF7\xBB\xB6\xB3\xEE\x20\x68\x3A\xA8\x1C\xB5\x0D\xA2\x0E\xDB"
		"\x0E\x57\xFB\x1E\xE4\xD8\xA4\x9C\x61\x08\x5C\x1D\x5A\x94\x8A\x2F"
		"\x66\xA9\x34\x49\x37\x2D\xF0\x13\x09\xF6\x93\x4A\x89\x61\xDE\xA0"
		"\x3D\x09\x74\xE1\x60\x1B\x74\xE7\x52\x56\xD3\xE2\xDE\x57\x5A\x54"
		"\x7A\x2D\x96\x18\x82\xC8\x1A\xE2\x15\x72\x31\x1B\x3C\x84\x34\x51"
		"\x21\x8D\xD6\xB0\xD5\xFE\x9E\x16\x4E\xD2\x71\xB3\x6B\xB2\xB0\xA5"
		"\x49\x73\x19\xE7\x06\x0B\xCA\x99\x26\x2C\xBE\xE4\xB8\x47\xE4\x2A"
		"\x12\xD3\x59\x4F\x51\x3D\x4E\x6D\x7D\x8C\xFE\x4C\xEF\x71\x60\xDE"
		"\x1C\x91\x88\xE7\x8B\x4F\xBB\x15\x73\xCE\x2F\xE4\x35\x03\x95\xA6"
		"\x47\x31\xC8\x4F\xDC\x79\x3F\xE1\x28\x6E\x6F\x4C\x62\x35\x11\x52"
		"\x2F\xCF\x07\x18\x0F\x8C\x6B\x6E\x40\x90\xA0\x1B\xB1\xC0\x45\xDD"
		"\x74\x6F\x47\xB0\x58\xBA\xEF\x9A\x1B\x30\xE0\xB3\xE6\xF6\xC1\x29"
		"\x42\x0F\x87\xD7\x95\x57\x6C\xC9\x2D\x50\x20\xD4\x2B\x1B\x42\x7A"
		"\x19\xAF\xC7\x7F\xC2\x61\xE8\x3D\x76\xF0\x60\x7C\x7C\x2D\xC6\x8E"
		"\x71\x51\x08\x28\x11\x94\xBC\xB2\x1E\x0E\xAF\x2B\xAF\xD8\x92\x01"
		"\x2A\xF1\x48\x80\x46\xA2\x38\x46\x45\xAE\xEF\x83\xF8\xEE\x16\xF5"
		"\x24\xB3\x99\x28\x9C\xD0\xCD\x3E\x4B\xEC\x3E\x2B\x22\x9C\xE3\x8D"
		"\x7F\x13\xD9\x80\xCB\xE6\x49\xCA\x10\x4C\x7E\x83\x75\xAA\x67\x79"
		"\x17\xED\x16\xD7\x18\x13\x1D\x45\x78\xB2\xB1\xD4\xA6\x5F\x33\xF6"
		"\x4C\x4D\x56\x7F\x4F\x25\x99\xB1\x23\x12\xF1\x7C\xF1\x69\xB7\x02"
		"\x0B\x69\xB4\x86\xAD\xF6\xF7\xB4\x64\x36\x13\x85\x13\xBA\xD9\x07"
		"\x50\xC9\xF4\x2E\xFA\xC0\x73\x40\x3F\x96\x53\x2D\x44\x8C\x5D\xF3"
		"\x38\x37\x3B\x79\x29\x35\x27\xCF\x57\x68\x9C\x7A\x97\x79\x09\x7C"
		"\x63\x97\x7B\xD1\x7E\x03\xA3\x3B\x0C\xC8\xDC\xD2\xC0\x4F\x8D\x88"
		"\x6D\xD5\xAA\x79\xA4\x71\x56\x43\x02\x8A\x0D\x7A\x1A\x3D\x78\xF0"
		"\x36\x75\xEA\xD1\xF3\x47\xD2\xB7\x59\x2A\x4D\xD2\x4D\x0B\xFC\x04"
		"\x5E\x8B\x25\x86\x20\xB2\x86\x38\x31\xD4\x82\x85\x9E\xFE\xA8\x8B"
		"\x05\x2B\x65\x2E\x77\x84\x02\xCC\x6A\x74\xC2\x2D\xC9\xC8\x2C\x7F"
		"\xD0\xC3\xE1\x75\xE5\x15\x5B\x32\xBF\x9C\x46\x76\x5B\x59\x75\x81"
		"\x8B\x63\xA1\xDD\xB2\x23\xDF\xC6\xE4\x3C\x06\xDE\x0C\x6F\xF1\x75"
		"\xE3\x9D\x6E\x8A\x61\xD6\x8B\x49\x8C\xC2\xC9\x89\xDF\x9A\xA5\xFA"
		"\xB8\x3D\x2E\x22\x36\xE0\x0F\xBD\xD7\x62\x89\x21\x88\xAC\x21\x0E"
		"\xB6\x7F\xFF\x8A\xEC\x92\xFA\xC5\xD9\x20\x58\x89\x52\xDE\xD4\x76"
		"\xED\xDF\xBF\x22\xBB\xA4\x7E\x31\x82\x80\x18\x21\x05\xE8\x50\x82"
		"\x85\x21\x70\x75\x68\x51\x2A\xBE\xEA\x7E\xD7\x76\xD6\x1D\x04\x0D"
		"\xDE\x81\x30\xDD\x3F\x67\xAE\x4A\xB1\xDE\x97\xDE\x81\x2B\x80\xF9"
		"\x99\xA5\xD2\x24\xDD\xB4\xC0\x4F\xF6\xFA\x75\x27\x63\xF8\xEE\xFC"
		"\xC2\x05\x92\x8C\x8A\x82\x44\xBB\xAD\x5A\x35\x8F\x34\xCE\x6A\x08"
		"\xAA\xFB\x5D\xDB\x59\x77\x10\x34\xC5\xA4\xFA\xD8\xE7\x3B\x3E\x87"
		"\xF1\x5B\x1D\x73\x0E\x41\x94\xC0\x9E\x04\xBA\x70\xB0\x0D\xBA\x73"
		"\xFF\x19\xCC\xDB\xD4\x33\x61\xB8\x90\x46\x6B\xD8\x6A\x7F\x4F\x0B"
		"\xA4\xB9\x8C\x73\x83\x05\xE5\x4C\xCB\xE6\x2B\x70\x3D\x49\xCB\xFF"
		"\xCC\x47\x43\x24\x50\xF0\xB1\xC3\xA3\x18\xE4\x27\xEE\xBC\x9F\x70"
		"\x97\xE7\x03\x8C\x07\xC6\x35\x37\xF8\xB8\xA4\x8F\xB9\x8A\x1B\x84"
		"\xE3\x88\x44\x3C\x5F\x7C\xDA\xAD\x8C\xD7\xE3\x3F\xE1\x30\xF4\x1E"
		"\xB8\x28\x04\x94\x08\x4A\x5E\x59\xD7\x77\xA3\x97\xB6\x06\x70\xEA"
		"\xD0\xD6\xCB\xC3\xDB\xBF\x0A\xD6\xBF\x89\x6C\xC0\x65\xF3\x24\x65"
		"\x8B\x76\x8B\x6B\x8C\x89\x8E\x22\xE4\x29\x2C\x68\x32\xC5\xA0\x91"
		"\x85\x34\x5A\xC3\x56\xFB\x7B\x5A\xEA\x6B\xFD\xC0\xE8\xB7\x55\xE9"
		"\xDE\x94\x1A\x6B\x01\xCD\xFF\xAE\xB1\xCB\xBD\x68\xBF\x81\xD1\x1D"
		"\xB6\x6A\xD5\x3C\xD2\x38\xAB\x21\xD9\x35\x72\x3F\x6C\x74\x85\x92"
		"\xED\xCA\x95\x94\x85\x0E\x2F\xD5\x82\x95\x32\x97\x3B\x42\x01\x66"
		"\xAA\xEE\x77\x6D\x67\xDD\x41\xD0\xC5\xB1\xD0\x6E\xD9\x91\x6F\x63"
		"\xF1\x4E\x37\xC5\x30\xEB\xC5\x24\x9E\x11\x90\xC6\x8E\xA7\xEB\x97"
		"\x99\xB0\xF8\x92\xE3\x1E\x91\xAB\xF6\xEF\x5F\x91\x5D\x52\xBF\x18"
		"\xC2\x10\xB8\x3A\xB4\x28\x15\x5F\xAD\x4F\x1F\x39\x0A\x64\x3B\xEC"
		"\xCC\x52\x69\x92\x6E\x5A\xE0\x27\xA3\x0D\xCE\x91\xD0\x16\xCE\x94"
		"\x97\xF2\x29\x3A\x39\x6C\x64\xD3\xF8\xAD\x8E\x39\x87\x20\x4A\x60"
		"\xFF\x0C\xE6\x6D\xEA\x99\x30\x5C\x90\x53\x41\x6E\x54\xD5\x1E\xEF"
		"\xA4\xAC\xA6\xC5\xBD\xAF\xB4\xA8\xCB\xF3\x01\xC6\x03\xE3\x9A\x1B"
		"\x71\x44\x22\x9E\x2F\x3E\xED\x56\x1E\x1B\x85\x9D\x91\x72\xC3\xE5"
		"\x2A\xE4\x62\x36\x78\x08\x69\xA2\x45\xBB\xC5\x35\xC6\x44\x47\x11"
		"\x42\x1A\xAD\x61\xAB\xFD\x3D\x2D\x2D\x45\x0A\x62\x15\xB1\x13\x9E"
		"\x19\xBA\xED\xC9\xFC\xCB\xB9\xD9\x76\xE5\x4A\xCA\x42\x87\x97\x6A"
		"\x17\xF8\x3C\x61\x26\xB9\x4C\xA1\x78\xA7\x9B\x62\x98\xF5\x62\x12"
		"\x4C\x58\x7C\xC9\x71\x8F\xC8\x55\x23\x07\xDB\xCA\xCF\xC3\xE6\xE6"
		"\x24\xA6\xB3\x9E\xA2\x7A\x9C\xDA\x4B\xF9\x14\x9D\x1C\x36\xB2\x69"
		"\x7F\x06\xF3\x36\xF5\x4C\x18\x2E\x10\x59\x54\x35\x4B\x00\x36\x9D"
		"\x38\x22\x11\xCF\x17\x9F\x76\x2B\x57\x7D\xB6\xCC\xA9\xD3\x58\x98"
		"\x63\x82\x51\x67\x40\xA9\xF2\xDF\x0C\xDD\xF6\x64\xFE\xE5\xDC\x6C"
		"\x0B\x7C\x9E\x30\x93\x5C\xA6\x50\x64\x23\x39\x33\x2D\x10\x88\xE3"
		"\x50\xDC\xDE\x98\xC4\x6A\x22\xA4\x3F\x83\x79\x9B\x7A\x26\x0C\x17"
		"\x5E\x9E\x0F\x30\x1E\x18\xD7\xDC\x31\xC1\xA8\x33\xA0\x54\xF9\x6F"
		"\x05\x3E\x4F\x98\x49\x2E\x53\x28\x6A\x61\xE8\x9B\xF7\x62\x7D\x9B"
		"\x6D\xC0\x80\xCF\x9A\xDB\x07\xA7\x02\x9F\x27\xCC\x24\x97\x29\x14"
		"\x36\x60\xC0\x67\xCD\xED\x83\x53\x59\x3F\x67\x64\x73\xA1\xAD\xE0";
class crcMap
{
public:
	long long crc;
	char string[4] = "";
};
crcMap* roopFront(char* string, int roopCount = 3)
{
	static crcMap* front;
	static unsigned int length;
	if (roopCount == 3) // 처음에만 실행
	{
		front = new crcMap[95 * 95 * 95 * 95];
		length = 0;
	}
	for (int i = 0x20; i <= 0x7E; i++)
	{
		string[(3 - roopCount) * 16] = i;
		if (roopCount)
			roopFront(string, roopCount - 1);
		else
		{
			front[length].crc = getCRC64(string, 16 * 4);
			for (int j = 0; j < 4; j++)
				front[length].string[j] = string[j * 16];
			front[length].string[4] = 0;
			cout << "front roop :" << front[length].string << endl;
			length++;
		}
	}
	return front;
}
crcMap* roopBack(char* string, long long crc, int roopCount = 3)
{
	static crcMap* back;
	static unsigned int length;
	if (roopCount == 3) // 처음에만 실행
	{
		back = new crcMap[95 * 95 * 95 * 95];
		length = 0;
	}
	for (int i = 0x20; i <= 0x7E; i++)
	{
		string[16 * 4 + (3 - roopCount) * 16] = i;
		if (roopCount)
			roopBack(string, crc, roopCount - 1);
		else
		{
			back[length].crc = revCRC64(string, 16 * 4, 16 * 7, crc);
			for (int j = 0; j < 4; j++)
				back[length].string[j] = string[16 * 4 + j * 16];
			back[length].string[4] = 0;
			cout << "back roop :" << back[length].string << endl;
			length++;
		}
	}
	return back;
}
int static qsortCallback(const void* first, const void* second) // crc를 오름차순으로 정리
{
	if (((crcMap*)first)->crc > ((crcMap*)second)->crc)
		return 1;
	else if (((crcMap*)first)->crc < ((crcMap*)second)->crc)
		return -1;
	else
		return 0;
}
int main()
{
	char user_input[] =
		"\x01\x5B\x48\x65\x6C\x6C\x6F\x5F\x5F\x5F\x57\x65\x6C\x63\x6F\x6D"
		"\x01\x20\x54\x6F\x20\x52\x65\x76\x65\x72\x73\x69\x6E\x67\x2E\x4B"
		"\x01\x5D\x5F\x5F\x54\x68\x65\x20\x69\x64\x65\x61\x20\x6F\x66\x20"
		"\x01\x68\x65\x20\x61\x6C\x67\x6F\x72\x69\x74\x68\x6D\x20\x63\x61"
		"\x01\x65\x20\x6F\x75\x74\x20\x6F\x66\x20\x74\x68\x65\x20\x63\x6F"
		"\x01\x65\x65\x6E\x67\x6E\x20\x63\x68\x61\x6C\x6C\x65\x6E\x67\x65"
		"\x01\x5F\x54\x68\x69\x73\x20\x61\x6C\x67\x6F\x72\x69\x74\x68\x6D"
		"\x01\x76\x65\x72\x79\x20\x46\x58\x43\x4B\x5F\x5F\x42\x75\x74\x20"
		"\x79\x6F\x75\x20\x63\x61\x6E\x20\x73\x6F\x6C\x76\x65\x20\x69\x74"
		"\x21\x21\x5F\x5F\x49\x6D\x70\x6F\x73\x73\x69\x62\x6C\x65\x20\x69"
		"\x73\x20\x49\x6D\x70\x6F\x73\x73\x69\x62\x6C\x65\x5F\x28\x29\x5F"
		"\x5B\x5D\x5F\x28\x29\x5F\x5B\x5D\x5F\x28\x29\x5F\x5B\x5D\x5F\x28"
		"\x29\x5F\x5B\x5D\x5F\x28\x29\x5F\x5B\x5D\x5F\x28\x29\x5F\x5B\x5D"
		"\xE7\x51\xDE\x35\xA3\x13\x90\x2E\x29\x5F\x5B\x5D\x5F\x28\x29\x5F"
		"\x5B\x5D\x5F\x28\x29\x5F\x5B\x5D\x5F\x28\x29\x5F\x5B\x5D\x5F\x28"
		"\x29\x5F\x5B\x5D\x5F\x28\x29\x5F\x5B\x5D\x5F\x28\x29\x5F\x5B\x00";


	long long myEAX = 0x5F695F6C, myEDX = 0x676F5F67;
	long long crc = revCRC64(user_input, 113, 0xFF, (myEDX << 32) + myEAX);

	crcMap* front = roopFront(user_input);
	crcMap* back = roopBack(user_input, crc);
	qsort(front, 95 * 95 * 95 * 95, sizeof(crcMap), qsortCallback);
	qsort(back, 95 * 95 * 95 * 95, sizeof(crcMap), qsortCallback);

	int cursorFront=0, cursorBack=0;
	while (front[cursorFront].crc != back[cursorBack].crc)
	{
		if (front[cursorFront].crc > back[cursorBack].crc)
			cursorBack++;
		else if (front[cursorFront].crc < back[cursorBack].crc)
			cursorFront++;
	}
	
	cout << "flag : " << front[cursorFront].string << back[cursorBack].string << endl;
	delete front;
	delete back;

	while(1)
		_getch();
}
int myStrchr(const char* string, char letter, int size)
{
	for (int i = 0; i < size; i++)
	{
		if (string[i] == letter)
			return i;
	}
	return -1;
}
long long getCRC64(const char* string, int length)
{
	unsigned int myEAX = 0, myEDX = 0;
	for (int i = 0; i < length; i++)
	{
		_asm {
			xor ecx, ecx
			mov eax, string
			add eax, i
			mov cl, byte ptr [eax]
			mov edi, ecx
			mov eax, myEAX
			mov edx, myEDX
			mov ecx, eax
			and ecx, 0xFF
			xor edi, ecx
			shrd eax, edx, 8
			shr edx, 8
			mov ebx, salt
			mov ecx, dword ptr [ebx+edi*8]
			xor ecx, eax
			mov edi, dword ptr [ebx+4+edi*8]
			mov eax, ecx
			xor edi, edx
			mov edx, edi
			mov myEAX, eax
			mov myEDX, edx
		}
	}
	long long temp = myEDX;
	return (temp << 32) + myEAX;
}
long long revCRC64(const char* string, int min, int max, long long crc)
{
	unsigned int myEAX = crc & 0x00000000FFFFFFFF, myEDX = crc >> 32;
	int index, index2;
	char letter;
	int i;
	for ( i = max; i >= min; i--)
	{
		letter = myEDX >> 24;
		index = 0;
		while (index <= 0xFF * 8 + 3)
		{
			index2 = myStrchr(salt + 4 + index, letter, 0xFF * 8 + 4 - index);
			if (index2 == -1)
			{
				cout << "edi can't be found" << endl;
				return 0;
			}

			index += index2;
			if (index % 8 == 3)
			{
				break;
			}
			index++;
		}
		_asm {
			mov edi, index
			lea edi, [edi - 3]
			shr edi, 3
			push edi
			mov ecx, salt
			mov edi, dword ptr[ecx + 4 + edi * 8] // CRC테이블에서 값을 읽어옴
			xor edi, myEDX
			mov edx, edi
			pop edi
			mov eax, myEAX
			xor eax, [ecx+edi*8]
			rol eax, 8
			shl edx, 8
			mov dl, al
			mov myEDX, edx
			mov ecx, string
			mov edx, i
			mov ebx, edi
			movzx ecx, byte ptr [ecx + edx]
			xor ebx, ecx
			mov al, bl
			mov myEAX, eax
		}
	}
	long long temp = myEDX;
	return (temp << 32) + myEAX;
}
// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
